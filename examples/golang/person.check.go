// Code generated by protoc-gen-protocheck. DO NOT EDIT.

package golang

import (
	"sync"

	"github.com/emicklei/protocheck"
	"github.com/google/cel-go/cel"
	"github.com/google/cel-go/checker/decls"
)

var (
	personValidator     protocheck.MessageValidator
	personValidatorOnce sync.Once
	petValidator        protocheck.MessageValidator
	petValidatorOnce    sync.Once
)

func file_person_check_proto_init() {
	// ensure proto_init (idempotent) is called first.
	file_person_proto_init()
	env, err := cel.NewEnv(
		cel.Types(new(Person)),
		cel.Declarations(
			decls.NewVar("this", decls.NewObjectType("golang.Person"))))
	if err != nil {
		panic(err)
	}
	chs := []protocheck.Checker{}
	{ // Name
		if prg, err := protocheck.MakeProgram(env, `size(this.name) > 1`); err != nil {
			panic(err)
		} else {
			chs = append(chs, protocheck.NewChecker("", "name cannot be empty", `size(this.name) > 1`, prg))
		}
	}
	{ // Description
		if prg, err := protocheck.MakeProgram(env, `size(this.description) > 0`); err != nil {
			panic(err)
		} else {
			chs = append(chs, protocheck.NewChecker("", "description cannot be empty", `size(this.description) > 0`, prg))
		}
	}
	{ // BirthDate
		if prg, err := protocheck.MakeProgram(env, `this.birth_date.getFullYear() > 2000`); err != nil {
			panic(err)
		} else {
			chs = append(chs, protocheck.NewChecker("check_birth_date", "", `this.birth_date.getFullYear() > 2000`, prg))
		}
	}
	personValidator = protocheck.NewMessageValidator(chs)
}

// Validate checks the validity of the Person message.
// Returns an error if the validation fails.
func (x *Person) Validate() protocheck.ValidationError {
	personValidatorOnce.Do(file_person_check_proto_init)
	return personValidator.Validate(x)
}
func file_pet_check_proto_init() {
	// ensure proto_init (idempotent) is called first.
	file_person_proto_init()
	env, err := cel.NewEnv(
		cel.Types(new(Pet)),
		cel.Declarations(
			decls.NewVar("this", decls.NewObjectType("golang.Pet"))))
	if err != nil {
		panic(err)
	}
	chs := []protocheck.Checker{}
	{ // Kind
		if prg, err := protocheck.MakeProgram(env, `this.kind == 'cat' || this.kind == 'dog' `); err != nil {
			panic(err)
		} else {
			chs = append(chs, protocheck.NewChecker("", "", `this.kind == 'cat' || this.kind == 'dog' `, prg))
		}
	}
	petValidator = protocheck.NewMessageValidator(chs)
}

// Validate checks the validity of the Pet message.
// Returns an error if the validation fails.
func (x *Pet) Validate() protocheck.ValidationError {
	petValidatorOnce.Do(file_pet_check_proto_init)
	return petValidator.Validate(x)
}
