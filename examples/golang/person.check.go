// Code generated by protoc-gen-protocheck. DO NOT EDIT.

package golang

import (
	"sync"

	"github.com/emicklei/protocheck"
	"github.com/google/cel-go/cel"
	"github.com/google/cel-go/checker/decls"
	"google.golang.org/protobuf/proto"
)

var (
	healthValidator     protocheck.MessageValidator
	healthValidatorOnce sync.Once
	personValidator     protocheck.MessageValidator
	personValidatorOnce sync.Once
	petValidator        protocheck.MessageValidator
	petValidatorOnce    sync.Once
)

func file_health_check_proto_init() {
	// ensure proto_init (idempotent) is called first.
	file_person_proto_init()
	env, err := cel.NewEnv(
		cel.Types(new(Person_Health)),
		cel.Declarations(
			decls.NewVar("this", decls.NewObjectType("golang.Person.Health"))))
	if err != nil {
		panic(err)
	}
	messageCheckers := []protocheck.Checker{}
	fieldCheckers := []protocheck.Checker{}
	{ // Weight
		if prg, err := protocheck.MakeProgram(env, `this.weight > 0`); err != nil {
			panic(err)
		} else {
			fieldCheckers = append(fieldCheckers, protocheck.NewChecker("", "weight in kg must be positive", `this.weight > 0`, "Weight", false, prg))
		}
	}
	healthValidator = protocheck.NewMessageValidator(messageCheckers, fieldCheckers)
}

// Validate checks the validity of the Person_Health message.
// Returns an error if the validation fails.
func (x *Person_Health) Validate() protocheck.ValidationError {
	healthValidatorOnce.Do(file_health_check_proto_init)
	return healthValidator.Validate(x)
}
func file_person_check_proto_init() {
	// ensure proto_init (idempotent) is called first.
	file_person_proto_init()
	env, err := cel.NewEnv(
		cel.Types(new(Person)),
		cel.Declarations(
			decls.NewVar("this", decls.NewObjectType("golang.Person"))))
	if err != nil {
		panic(err)
	}
	messageCheckers := []protocheck.Checker{}
	{ // person_invariant
		if prg, err := protocheck.MakeProgram(env, `size(this.name + this.surname) > 0`); err != nil {
			panic(err)
		} else {
			messageCheckers = append(messageCheckers, protocheck.NewChecker("person_invariant", "name and surname cannot be empty", `size(this.name + this.surname) > 0`, "", false, prg))
		}
	}
	fieldCheckers := []protocheck.Checker{}
	{ // Name
		if prg, err := protocheck.MakeProgram(env, `size(this.name) > 1`); err != nil {
			panic(err)
		} else {
			fieldCheckers = append(fieldCheckers, protocheck.NewChecker("", "name must be longer than 1", `size(this.name) > 1`, "Name", false, prg))
		}
	}
	{ // MiddleName
		if prg, err := protocheck.MakeProgram(env, `size(this.middle_name) > 0`); err != nil {
			panic(err)
		} else {
			fieldCheckers = append(fieldCheckers, protocheck.NewChecker("", "middle name (if set) cannot be empty", `size(this.middle_name) > 0`, "MiddleName", true, prg))
		}
	}
	{ // Surname
		if prg, err := protocheck.MakeProgram(env, `size(this.surname) > 1`); err != nil {
			panic(err)
		} else {
			fieldCheckers = append(fieldCheckers, protocheck.NewChecker("", "surname must be longer than 1", `size(this.surname) > 1`, "Surname", false, prg))
		}
	}
	{ // BirthDate
		if prg, err := protocheck.MakeProgram(env, `this.birth_date.getFullYear() > 2000`); err != nil {
			panic(err)
		} else {
			fieldCheckers = append(fieldCheckers, protocheck.NewChecker("check_birth_date", "[this.birth_date.getFullYear() > 2000] is false", `this.birth_date.getFullYear() > 2000`, "BirthDate", false, prg))
		}
	}
	personValidator = protocheck.NewMessageValidator(messageCheckers, fieldCheckers)
}

// Validate checks the validity of the Person message.
// Returns an error if the validation fails.
func (x *Person) Validate() protocheck.ValidationError {
	personValidatorOnce.Do(file_person_check_proto_init)
	ve := personValidator.Validate(x)
	var nested proto.Message = x.GetHealth()
		if v, ok := nested.(protocheck.Validator); ok {
			ve = append(ve, v.Validate()...)
		}
	return ve
}
func file_pet_check_proto_init() {
	// ensure proto_init (idempotent) is called first.
	file_person_proto_init()
	env, err := cel.NewEnv(
		cel.Types(new(Pet)),
		cel.Declarations(
			decls.NewVar("this", decls.NewObjectType("golang.Pet"))))
	if err != nil {
		panic(err)
	}
	messageCheckers := []protocheck.Checker{}
	fieldCheckers := []protocheck.Checker{}
	{ // Kind
		if prg, err := protocheck.MakeProgram(env, `this.kind == 'cat' || this.kind == 'dog'`); err != nil {
			panic(err)
		} else {
			fieldCheckers = append(fieldCheckers, protocheck.NewChecker("", "only dog and cat are allowed", `this.kind == 'cat' || this.kind == 'dog'`, "Kind", false, prg))
		}
	}
	petValidator = protocheck.NewMessageValidator(messageCheckers, fieldCheckers)
}

// Validate checks the validity of the Pet message.
// Returns an error if the validation fails.
func (x *Pet) Validate() protocheck.ValidationError {
	petValidatorOnce.Do(file_pet_check_proto_init)
	return petValidator.Validate(x)
}
