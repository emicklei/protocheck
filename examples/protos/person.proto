syntax = "proto3";

package golang;

import "check.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/emicklei/protocheck-example/golang;golang";

message Person {
  
  // message cross-field checks
  option (check.message) = { cel:"size(this.name + this.surname) > 0" fail:"name and surname cannot be empty" id:"person_invariant" };
  option (check.message) = { cel:"this.health.weight <= 300" fail:"weight cannot be larger than 300" id:"person_health_weight_invariant" };
  
  // with per field state checks
           string                    name        = 1 [(check.field) = { cel:"size(this.name) > 1"                  fail:"name must be longer than 1"           }];
  optional string                    middle_name = 2 [(check.field) = { cel:"size(this.middle_name) > 0"           fail:"middle name (if set) cannot be empty" }];
           string                    surname     = 3 [(check.field) = { cel:"size(this.surname) > 1"               fail:"surname must be longer than 1"        }];
           google.protobuf.Timestamp birth_date  = 4 [(check.field) = { cel:"this.birth_date.getFullYear() > 2000" id:"check_birth_date" }];
  // nested message
  message Health {
    int32 weight = 1 [(check.field) = { cel:"this.weight > 0" fail:"weight in kg must be positive" }];
    double avg_hart_rate = 2 [(check.field) = { cel:"this.avg_hart_rate > 0.0" fail:"average heart rate must be positive" }];
  }
  Health health = 5;

  // oneof with field checks
  // test with https://playcel.undistro.io/
  oneof identification {
    string email = 6 [(check.field) = { 
      cel:"this.email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$')" 
      fail:"email is not valid"
      id:"email" }];
    string phone = 7 [(check.field) = {
      cel:"this.phone.matches('^[0-9]{3}-[0-9]{3}-[0-9]{4}$')" 
      fail:"phone is not valid" }];
  }

  // repeated with field check
  repeated string nicknames = 8 [
      (check.field) = { cel:"size(this.nicknames) > 0 && this.nicknames.all(x,size(x)>0)" fail:"at least one nickname is required" } ,
      (check.field) = { cel:"this.nicknames.all(x,size(x)>0)" fail:"nickname cannot be empty" } ]; 

  // repeated proto message with  check
  repeated Pet pets = 9 [(check.field) = { cel:"size(this.pets) > 0" fail:"at least one Pet is required" }];

  // map with field check
  map<string, string> attributes = 10 [(check.field) = { cel:"size(this.attributes) > 0" fail:"at least one attribute is required" }];

  // map with proto message value with check
  map<string, Pet> favorites = 11 [(check.field) = { cel:"size(this.favorites) > 0" fail:"at least one favorite is required" }];

  google.protobuf.Timestamp no_check_date = 12;

  enum Gender {
    UNKNOWN = 0;
    MALE = 1;
    FEMALE = 2;
  }
  Gender gender = 13;
}

// second message in same file
message Pet {
  string kind = 1 [(check.field) = { cel:"this.kind == 'cat' || this.kind == 'dog'" fail:"only dog or cat is allowed" id:"pet1" }];
  string name = 2 [(check.field) = { cel:"size(this.name) > 0" fail:"name cannot be empty" }];
}

// message without checks
message Group {
  string name = 1;
}