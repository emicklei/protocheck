// Code generated by protoc-gen-protocheck. DO NOT EDIT.

package test

import (
	"sync"

	"github.com/emicklei/protocheck"
	"github.com/google/cel-go/cel"
	"github.com/google/cel-go/checker/decls"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

var (
	holidayValidator     protocheck.MessageValidator
	holidayValidatorOnce sync.Once
)

func file_holiday_check_proto_init() {
	// ensure proto_init (idempotent) is called first.
	file_holiday_proto_init()
	{ // test.Holiday
		env, err := cel.NewEnv(
			cel.Types(new(Holiday)),
			cel.Types(new(timestamppb.Timestamp)),
			cel.Declarations(
				decls.NewVar("now", decls.NewObjectType("google.protobuf.Timestamp")),
				decls.NewVar("this", decls.NewObjectType("test.Holiday"))))
		if err != nil {
			panic(err)
		}
		chs := []protocheck.Checker{}
		{ // Destination
			ast, iss := env.Compile(`size(this.destination) > 1`)
			if err = iss.Err(); err != nil {
				panic(err)
			}
			prg, err := env.Program(ast)
			if err != nil {
				panic(err)
			}
			chs = append(chs, protocheck.NewChecker("", "", `size(this.destination) > 1`, prg))
		}
		holidayValidator = protocheck.NewMessageValidator(chs)
	}
	{ // test.Holiday
		env, err := cel.NewEnv(
			cel.Types(new(Holiday)),
			cel.Types(new(timestamppb.Timestamp)),
			cel.Declarations(
				decls.NewVar("now", decls.NewObjectType("google.protobuf.Timestamp")),
				decls.NewVar("this", decls.NewObjectType("test.Holiday"))))
		if err != nil {
			panic(err)
		}
		chs := []protocheck.Checker{}
		{ // Group
			ast, iss := env.Compile(`size(this.group) > 0`)
			if err = iss.Err(); err != nil {
				panic(err)
			}
			prg, err := env.Program(ast)
			if err != nil {
				panic(err)
			}
			chs = append(chs, protocheck.NewChecker("", "", `size(this.group) > 0`, prg))
		}
		holidayValidator = protocheck.NewMessageValidator(chs)
	}
}

// Validate checks the validity of the Holiday message.
// Returns an error if the validation fails.
func (x *Holiday) Validate(opts ...cel.EnvOption) error {
	holidayValidatorOnce.Do(file_holiday_check_proto_init)
	return holidayValidator.Validate(x, opts...)
}
