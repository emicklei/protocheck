// Code generated by protoc-gen-protocheck. DO NOT EDIT.

package {{.PkgName}}

import (
	"sync"

	"github.com/emicklei/protocheck"
	"github.com/google/cel-go/cel"
	"github.com/google/cel-go/checker/decls"
)

var (
    {{- range .Messages}}
    {{.LowercaseMessageName}}Validator     protocheck.MessageValidator
    {{.LowercaseMessageName}}ValidatorOnce sync.Once
    {{- end }}
)

 {{- range .Messages}}
func file_{{.LowercaseMessageName}}_check_proto_init() {
	// ensure proto_init (idempotent) is called first.
	{{.InitFuncName}}()

    {{- $lowerName := .LowercaseMessageName}}
	env, err := cel.NewEnv(
		cel.Types(new({{.MessageName}})),
		cel.Declarations(
			decls.NewVar("this", decls.NewObjectType("{{.ObjectTypeName}}"))))
	if err != nil {
		panic(err)
	}
	messageCheckers := []protocheck.Checker{}	
	{{- range .MessageCheckers }}	
	{ // {{.Comment}}
		if prg, err := protocheck.MakeProgram(env,`{{.Expr}}`); err != nil {
			panic(err)
		} else {
			messageCheckers = append(messageCheckers, protocheck.NewChecker("{{.ID}}", "{{.Fail}}", `{{.Expr}}`, "", false, prg))
		}
	}	
    {{- end }}	
	fieldCheckers := []protocheck.Checker{}
	{{- range .FieldCheckers }}	
	{ // {{.Comment}}
		if prg, err := protocheck.MakeProgram(env,`{{.Expr}}`); err != nil {
			panic(err)
		} else {
			fieldCheckers = append(fieldCheckers, protocheck.NewChecker("{{.ID}}", "{{.Fail}}", `{{.Expr}}`,"{{.FieldName}}", {{.IsOptional}}, prg))
		}
	}	
    {{- end }}
	{{$lowerName}}Validator = protocheck.NewMessageValidator(messageCheckers,fieldCheckers)
}

// Validate checks the validity of the {{.MessageName}} message.
// Returns an error if the validation fails.
func (x *{{.MessageName}}) Validate() protocheck.ValidationError {
	{{.LowercaseMessageName}}ValidatorOnce.Do(file_{{.LowercaseMessageName}}_check_proto_init)
	return {{.LowercaseMessageName}}Validator.Validate(x)
}
{{- end }}