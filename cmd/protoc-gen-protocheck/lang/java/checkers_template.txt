// Code generated by protoc-gen-protocheck. DO NOT EDIT.

package {{.PkgName}};

import java.util.List;

import org.emicklei.protocheck.Checker;
import org.emicklei.protocheck.pb.CheckError;
import org.emicklei.protocheck.MessageValidator;

import dev.cel.common.CelValidationException;
import dev.cel.common.types.SimpleType;
import dev.cel.common.types.StructTypeReference;
import dev.cel.compiler.CelCompiler;
import dev.cel.compiler.CelCompilerFactory;
import dev.cel.runtime.CelEvaluationException;
import dev.cel.runtime.CelRuntime.Program;
import dev.cel.parser.CelStandardMacro;

public final class {{.JavaOuterClassname}}Checkers {
    private {{.JavaOuterClassname}}Checkers() {}

    {{- range .Messages}}
    private static MessageValidator<{{.MessageName}}> {{.LowercaseMessageName}}Validator= new MessageValidator<{{.MessageName}}>();
    
    static { 
        try {
            CelCompiler compiler = CelCompilerFactory.standardCelCompilerBuilder()
                    .addMessageTypes({{.MessageName}}.getDescriptor())
                    .addVar("this", StructTypeReference.create({{.MessageName}}.getDescriptor().getFullName()))
                    .setStandardEnvironmentEnabled(true)
                    .setStandardMacros(CelStandardMacro.STANDARD_MACROS)
                    .setResultType(SimpleType.BOOL)
                    .build();
            {{- $lowerName := .LowercaseMessageName}}                                                    
            {{- range .MessageCheckers }}	
	        { // {{.Comment}}
                String expr = "{{.Expr}}";
                Program prog = Checker.makeProgram(compiler.compile(expr).getAst());
                Checker checker = new Checker("{{.ID}}","{{.Fail}}",expr,prog,"{{.FieldName}}",{{.IsOptional}});            
                {{$lowerName}}Validator.addMessageChecker(checker);
            }
            {{- end}}
            {{- $msgName := .MessageName}}
            {{- range .FieldCheckers }}
            { // {{.Comment}}
                String expr = "{{.Expr}}";
                Program prog = Checker.makeProgram(compiler.compile(expr).getAst());
                Checker checker = new Checker("{{.ID}}","{{.Fail}}",expr,prog,"{{.FieldName}}",{{.IsOptional}});
                checker.setIsSet(x -> {
                    if (x == null) { return false; }
                    return {{.IsSetConditionSource}}
                });
                checker.setIsEnabled(x -> {
                    if (x == null) { return false; }
                    return {{.IsSetConditionSource}}
                });             
                {{$lowerName}}Validator.addFieldChecker(checker);
            }
            {{- end}}
        } catch (CelEvaluationException ex) {
            System.err.println("CelEvaluationException: " + ex.getMessage());
            throw new RuntimeException(ex.getCause());

        } catch (CelValidationException ex) {
            System.err.println("CelValidationException: " + ex.getMessage());
            throw new RuntimeException(ex.getCause());
        }
    }

    public static List<CheckError> validate({{.MessageName}} x) {
        if (x == null) { return new java.util.ArrayList<CheckError>(); }
        List<CheckError> errors = {{.LowercaseMessageName}}Validator.validate(x);
        {{- range .MessageFieldNames}}	         
        for (CheckError err : validate(x.get{{.}}())) { // {{.}}
            errors.add(Checker.withPath(err,"{{.}}"));
        }
        {{- end}}	
        {{- range .RepeatedFields}}
        // {{.Name}}
        List<{{.ElementJavaType}}> list = x.get{{.Name}}List();
        for (int i=0;i<list.size();i++) {
            for (CheckError err : validate(list.get(i))) {
                errors.add(Checker.withParentField(err,"{{.Name}}", i));
            }
        }
        {{- end}}        
        {{- range .MapFields}}
        // {{.Name}}
        for (java.util.Map.Entry<{{.KeyJavaType}}, {{.ElementJavaType}}> entry : x.get{{.Name}}Map().entrySet()) {
            for (CheckError err : validate(entry.getValue())) {
                errors.add(Checker.withParentField(err,"{{.Name}}", entry.getKey()));
            }
        }
        {{- end}}        
        return errors;
    }
    {{- end }}
}